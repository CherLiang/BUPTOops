            Expr程序文档

表达式计算
    为了计算表达式，首先要正确地定义运算规则：先乘除、后加减；从左到右；先括号内，再括号外……为了让计算机能识别表达式，规定：表达式由操作数（Operand）和操作符（Operator）组成。例如，3*（7-2）；实际处理表达式是用两个栈结构Operators（运算符）和Oprands（操作数）加运算规则组成。为了方便起见，表达式左右两段加上一对括号，可以起到哨兵的作用，防止运算符出界。

计算表达式算法步骤
      step1  获得表达式输入，构造Expr类，将左定界符压Operators栈；
      step2  循环扫描表达式中的每个字符，
           若为输入操作数，则进Oprands栈；若是运算符，则和Operators栈顶元素进行比较，按规则进行相应操作，操作服从优先关系。
          Q2 > Q1 Q1入Operators栈，再读入下一个元素。在实现中右括号不会入栈，当左右括号进行比较时，采取的策略是左括号出栈
          Q1 > Q2 Q1出Operators栈，从Oprands中取两个数运算
      step3  直到表达式结束为止。 

优先级表
	+	-	*	/	(	)
+	0	0	1	1	1	0
-	0	0	1	1	1	0
*	0	0	0	0	1	0
/	0	0	0	0	1	0
(	1	1	1	1	1	1
)	1	1	1	1	1	1
+-号拥有同样的优先级，*/号拥有同样的优先级，当同级优先级进行比较时，规定左端的运算符的优先级小于右端运算符的优先级。左括号拥有至高的优先级，而右括号拥有很低的优先级。
